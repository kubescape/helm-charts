{{- $checksums := fromYaml (include "checksums" .) }}
{{- $components := fromYaml (include "components" .) }}
{{- if $components.kubescape.enabled }}
{{- $configurations := fromYaml (include "configurations" .) }}
{{- $no_proxy_envar_list := (include "no_proxy_envar_list" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kubescape.name }}
  namespace: {{ .Values.ksNamespace }}
  annotations:
    {{- include "kubescape-operator.annotations" (dict "Values" .Values) | nindent 4 }}
  labels:
    {{- include "kubescape-operator.labels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.kubescape.name "tier" .Values.global.namespaceTier) | nindent 4 }}
    kubescape.io/tier: "core"
spec:
  replicas: 1
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 100%
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "kubescape-operator.selectorLabels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.kubescape.name) | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- include "kubescape-operator.annotations" (dict "Values" .Values) | nindent 8 }}
        {{- with .Values.kubescape.podAnnotations }}{{- toYaml . | nindent 8 }}{{- end }}
        checksum/host-scanner-configmap: {{ $checksums.hostScannerConfig }}
        checksum/cloud-secret: {{ $checksums.cloudSecret }}
        checksum/cloud-config: {{ $checksums.cloudConfig }}
      {{- if ne .Values.global.proxySecretFile "" }}
        checksum/proxy-config: {{ $checksums.proxySecret }}
      {{- end }}
      {{- if eq .Values.configurations.prometheusAnnotations "enable" }}
        prometheus.io/path: /v1/metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        {{- include "kubescape-operator.labels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.kubescape.name "tier" .Values.global.namespaceTier) | nindent 8 }}
        {{- with .Values.kubescape.podLabels }}{{- toYaml . | nindent 8 }}{{- end }}
        kubescape.io/tier: "core"
      {{- if $components.otelCollector.enabled }}
        otel: enabled
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- if kindIs "string" .Values.imagePullSecrets }}
      - name: {{ .Values.imagePullSecrets }}
      {{- else }}
      {{- range .Values.imagePullSecrets }}
      - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- with (coalesce .Values.kubescape.podSecurityContext .Values.global.podSecurityContext) }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $components.serviceDiscovery.enabled }}
      initContainers:
      - name: {{ .Values.serviceDiscovery.urlDiscovery.name }}
        image: "{{ .Values.serviceDiscovery.urlDiscovery.image.repository }}:{{ .Values.serviceDiscovery.urlDiscovery.image.tag }}"
        imagePullPolicy: {{ .Values.serviceDiscovery.urlDiscovery.image.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
        resources:
{{ toYaml .Values.serviceDiscovery.resources | indent 14 }}
        env:
      {{- if ne .Values.global.httpsProxy "" }}
          - name: HTTPS_PROXY
            value: "{{ .Values.global.httpsProxy }}"
          - name : no_proxy
            value: "{{ $no_proxy_envar_list }}"
      {{- end }}
        args:
          - -method=get
          - -scheme=https
          - -host={{ .Values.server }}
          - -path=api/v2/servicediscovery
          - -path-output=/data/services.json
      {{- if .Values.serviceDiscovery.urlDiscovery.insecureSkipTLSVerify }}
          - -skip-ssl-verify=true
      {{- end}}
        volumeMounts:
          - name: services
            mountPath: /data
      {{- if ne .Values.global.proxySecretFile "" }}
          - name: proxy-secret
            mountPath: /etc/ssl/certs/proxy.crt
            subPath: proxy.crt
      {{- end }}
      {{- end }}
      containers:
      - name: kubescape
        image: "{{ .Values.kubescape.image.repository }}:{{ .Values.kubescape.image.tag }}"
        imagePullPolicy: "{{ .Values.kubescape.image.pullPolicy }}"
        {{- with (coalesce .Values.kubescape.securityContext .Values.global.securityContext) }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
        env:
        - name: GOMEMLIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.memory
              divisor: '1'
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
              divisor: '1'
        - name: KS_LOGGER_LEVEL
          value: "{{ .Values.logger.level }}"
        - name: KS_LOGGER_NAME
          value: "{{ .Values.logger.name }}"
        - name: KS_DOWNLOAD_ARTIFACTS  # When set to true the artifacts will be downloaded every scan execution
          value: "{{ .Values.kubescape.downloadArtifacts }}"
        - name: RULE_PROCESSING_GOMAXPROCS
          value: "{{ .Values.kubescape.ruleProcessingConcurrency }}"
        - name: KS_DEFAULT_CONFIGMAP_NAME
          value: "{{ .Values.kubescape.name }}-config"
        - name: KS_DEFAULT_CONFIGMAP_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KS_CONTEXT
          value: "{{ .Values.clusterName }}"
        - name: KS_DEFAULT_CLOUD_CONFIGMAP_NAME
          value: {{ .Values.global.cloudConfig }}
        - name: KS_ENABLE_HOST_SCANNER
          value: "{{ $components.hostScanner.enabled }}"
        - name: KS_SKIP_UPDATE_CHECK
          value: "{{ .Values.kubescape.skipUpdateCheck }}"
        - name: KS_HOST_SCAN_YAML
          value: "/home/nonroot/.kubescape/host-scanner.yaml"
        - name: LARGE_CLUSTER_SIZE
          value: "1500"
        {{- range .Values.kubescape.env }}
        - name: {{ .name }}
          value: "{{ .value }}"
        {{- end }}

        {{- /* Check configuration to use a Secret if provided */}}
        {{- if .Values.cloudProviderMetadata.secretRef }}

          {{- if .Values.cloudProviderMetadata.secretRef.cloudRegionKey }}
        - name: KS_CLOUD_REGION
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.cloudRegionKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.gkeProjectKey }}
        - name: KS_GKE_PROJECT
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.gkeProjectKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.subscriptionIdKey }}
        - name: AZURE_SUBSCRIPTION_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.subscriptionIdKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.clientIdKey }}
        - name: AZURE_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.clientIdKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.clientSecretKey }}
        - name: AZURE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.clientSecretKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.tenantIdKey }}
        - name: AZURE_TENANT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.tenantIdKey }}"
          {{- end }}

          {{- if .Values.cloudProviderMetadata.secretRef.resourceGroupKey }}
        - name: AZURE_RESOURCE_GROUP
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.cloudProviderMetadata.secretRef.name }}"
              key: "{{ .Values.cloudProviderMetadata.secretRef.resourceGroupKey }}"
          {{- end }}

        {{- /* Fallback: If not using secretRef, use direct values (original method) */}}
        {{- else }}

          {{- if .Values.cloudProviderMetadata.cloudRegion }}
        - name: KS_CLOUD_REGION
          value: "{{ .Values.cloudProviderMetadata.cloudRegion }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.gkeProject }}
        - name: KS_GKE_PROJECT
          value: "{{ .Values.cloudProviderMetadata.gkeProject }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.aksSubscriptionID }}
        - name: AZURE_SUBSCRIPTION_ID
          value: "{{ .Values.cloudProviderMetadata.aksSubscriptionID }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.aksClientID }}
        - name: AZURE_CLIENT_ID
          value: "{{ .Values.cloudProviderMetadata.aksClientID }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.aksClientSecret }}
        - name: AZURE_CLIENT_SECRET
          value: "{{ .Values.cloudProviderMetadata.aksClientSecret }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.aksTenantID }}
        - name: AZURE_TENANT_ID
          value: "{{ .Values.cloudProviderMetadata.aksTenantID }}"
          {{- end }}
          {{- if .Values.cloudProviderMetadata.aksResourceGroup }}
        - name: AZURE_RESOURCE_GROUP
          value: "{{ .Values.cloudProviderMetadata.aksResourceGroup }}"
          {{- end }}

        {{- end }} {{- /* End of if/else for secretRef vs direct values */}}

        {{- if $components.otelCollector.enabled }}
        - name: ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: {{ $components.cloudSecret.name }}
              key: account
        - name: OTEL_COLLECTOR_SVC
          value: "otel-collector:4318"
        {{- end }}
        {{- if .Values.configurations.otelUrl }}
        - name: OTEL_COLLECTOR_SVC
          value: {{ .Values.configurations.otelUrl }}
        {{- end }}
        {{- if ne .Values.global.httpsProxy "" }}
        - name: HTTPS_PROXY
          value: "{{ .Values.global.httpsProxy }}"
        - name : no_proxy
          value: "{{ $no_proxy_envar_list }}"
        {{- end }}
        {{- if ne .Values.includeNamespaces "" }}
        - name: KS_INCLUDE_NAMESPACES
          value: "{{ .Values.includeNamespaces }}"
        {{- else if ne .Values.excludeNamespaces "" }}
        - name: KS_EXCLUDE_NAMESPACES
          value: "{{ .Values.excludeNamespaces }}"
        {{- end }}
        {{- if eq .Values.capabilities.kubescapeOffline "enable" }}
        - name: KS_OFFLINE
          value: "true"
        {{- end }}
        command:
        - ksserver
        resources:
{{ toYaml .Values.kubescape.resources | indent 14 }}
        volumeMounts:
        - name: {{ $components.cloudSecret.name }}
          mountPath: /etc/credentials
          readOnly: true
        - name: kubescape-volume
{{- if eq .Values.capabilities.kubescapeOffline "enable" }}
          mountPath: /home/nonroot/.kubescape/config.json
{{- else }}
          mountPath: /home/nonroot/.kubescape
{{- end }}
          subPath: config.json
        - name: host-scanner-definition
          mountPath: /home/nonroot/.kubescape/host-scanner.yaml
          subPath: host-scanner-yaml
        - name: results
          mountPath: /home/nonroot/results
        - name: failed
          mountPath: /home/nonroot/failed
        - name: {{ .Values.global.cloudConfig }}
          mountPath: /etc/config/clusterData.json
          readOnly: true
          subPath: "clusterData.json"
        {{- if $components.serviceDiscovery.enabled }}
        - name: "services"
          mountPath: /etc/config/services.json
          readOnly: true
          subPath: "services.json"
        {{- end }}
{{- if .Values.volumeMounts }}
{{ toYaml .Values.volumeMounts | indent 8 }}
{{- end }}
{{- if .Values.kubescape.volumeMounts }}
{{ toYaml .Values.kubescape.volumeMounts | indent 8 }}
{{- end }}
{{- if ne .Values.global.proxySecretFile "" }}
        - name: proxy-secret
          mountPath: /etc/ssl/certs/proxy.crt
          subPath: proxy.crt
{{- end }}
{{- if .Values.global.overrideDefaultCaCertificates.enabled }}
        - name: custom-ca-certificates
          mountPath: /etc/ssl/certs/ca-certificates.crt
          subPath: ca-certificates.crt
{{- end }}
{{- if .Values.global.extraCaCertificates.enabled }}
    {{- range $key, $value := (lookup "v1" "Secret" .Values.ksNamespace .Values.global.extraCaCertificates.secretName).data }}
        - name: extra-ca-certificates
          mountPath: /etc/ssl/certs/{{ $key }}
          subPath: {{ $key }}
    {{- end }}
{{- end }}
      volumes:
      - name: {{ $components.cloudSecret.name }}
        secret:
          secretName: {{ $components.cloudSecret.name }}
      {{- if ne .Values.global.proxySecretFile "" }}
      - name: proxy-secret
        secret:
          secretName: {{ .Values.global.proxySecretName }}
      {{- end }}
      {{- if .Values.global.overrideDefaultCaCertificates.enabled }}
      - name: custom-ca-certificates
        secret:
          secretName: {{ $components.customCaCertificates.name }}
      {{- end }}
      {{- if .Values.global.extraCaCertificates.enabled }}
      - name: extra-ca-certificates
        secret:
          secretName: {{ .Values.global.extraCaCertificates.secretName }}
      {{- end }}
      - name: {{ .Values.global.cloudConfig }}
        configMap:
          name: {{ .Values.global.cloudConfig }}
          items:
          - key: "clusterData"
            path: "clusterData.json"
      {{- if $components.serviceDiscovery.enabled }}
      - name: "services"
        emptyDir: {}
      {{- end }}
      - name: host-scanner-definition
        configMap:
          name: host-scanner-definition
      - name: kubescape-volume
        emptyDir: {}
      - name: results
        emptyDir: {}
      - name: failed
        emptyDir: {}
{{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 6 }}
{{- end }}
{{- if .Values.kubescape.volumes }}
{{ toYaml .Values.kubescape.volumes | indent 6 }}
{{- end }}
      serviceAccountName: {{ .Values.kubescape.name }}
      automountServiceAccountToken: true
      nodeSelector:
      {{- if .Values.kubescape.nodeSelector }}
      {{- toYaml .Values.kubescape.nodeSelector | nindent 8 }}
      {{- else if .Values.customScheduling.nodeSelector }}
      {{- toYaml .Values.customScheduling.nodeSelector | nindent 8 }}
      {{- end }}
      affinity:
      {{- if .Values.kubescape.affinity }}
      {{- toYaml .Values.kubescape.affinity | nindent 8 }}
      {{- else if .Values.customScheduling.affinity }}
      {{- toYaml .Values.customScheduling.affinity | nindent 8 }}
      {{- end }}
      tolerations:
      {{- if .Values.kubescape.tolerations }}
      {{- toYaml .Values.kubescape.tolerations | nindent 8 }}
      {{- else if .Values.customScheduling.tolerations }}
      {{- toYaml .Values.customScheduling.tolerations | nindent 8 }}
      {{- end }}
{{- end }}
