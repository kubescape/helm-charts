{{- $checksums := fromYaml (include "checksums" .) }}
{{- $components := fromYaml (include "components" .) }}
{{- if $components.nodeAgent.enabled }}
{{- $no_proxy_envar_list := (include "no_proxy_envar_list" .) -}}
apiVersion: apps/v1
{{- if .Values.capabilities.testing.nodeAgentMultiplication.enabled }}
kind: Deployment
{{- else }}
kind: DaemonSet
{{- end }}
metadata:
  name: {{ .Values.nodeAgent.name }}
  namespace: {{ .Values.ksNamespace }}
  labels:
    {{- include "kubescape-operator.labels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.nodeAgent.name "tier" .Values.global.namespaceTier) | nindent 4 }}
    kubescape.io/tier: "core"
spec:
{{- if .Values.capabilities.testing.nodeAgentMultiplication.enabled }}
  replicas: {{ .Values.capabilities.testing.nodeAgentMultiplication.replicas }}
{{- end }}
  selector:
    matchLabels:
      {{- include "kubescape-operator.selectorLabels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.nodeAgent.name) | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/node-agent-config: {{ $checksums.nodeAgentConfig }}
        checksum/cloud-secret: {{ $checksums.cloudSecret }}
        checksum/cloud-config: {{ $checksums.cloudConfig }}
      {{- if ne .Values.global.proxySecretFile "" }}
        checksum/proxy-config: {{ $checksums.proxySecret }}
      {{- end }}
        container.apparmor.security.beta.kubernetes.io/{{ .Values.nodeAgent.name }}: unconfined
      {{- if eq .Values.configurations.prometheusAnnotations "enable" }}
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        {{- include "kubescape-operator.labels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.nodeAgent.name "tier" .Values.global.namespaceTier) | nindent 8 }}
        kubescape.io/tier: "core"
      {{- if $components.otelCollector.enabled }}
        otel: enabled
      {{- end }}
    spec:
      securityContext:
        seccompProfile:
          type: Unconfined
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- if kindIs "string" .Values.imagePullSecrets }}
      - name: {{ .Values.imagePullSecrets }}
      {{- else }}
      {{- range .Values.imagePullSecrets }}
      - name: {{ . }}
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if .Values.configurations.priorityClass.enabled }}
      priorityClassName: kubescape-critical
      {{- end }}
      serviceAccountName: {{ .Values.nodeAgent.name }}
      automountServiceAccountToken: true
      hostPID: true
      {{- if .Values.nodeAgent.startupJitterContainer.enabled }}
      initContainers:
      - name: startup-jitter
        image: "busybox:latest"
        command:
        - /bin/sh
        - -c
        - |
          SLEEP_TIME=$(( $RANDOM % {{ .Values.nodeAgent.startupJitterContainer.maxStartupJitter }} ))
          echo "Pod $(hostname) will sleep for $SLEEP_TIME seconds"
          sleep $SLEEP_TIME
          echo "Pod $(hostname) finished sleeping after $SLEEP_TIME seconds"
      {{- end }}
      volumes:
      {{- if .Values.nodeAgent.volumes }}
      {{- toYaml .Values.nodeAgent.volumes | nindent 8 }}
      {{- end }}
      {{- if .Values.volumes }}
      {{- toYaml .Values.volumes | nindent 8 }}
      {{- end }}
      {{- if .Values.clamav.volumes }}
      {{- toYaml .Values.clamav.volumes | nindent 8 }}
      {{- end }}
        - name: {{ $components.cloudSecret.name }}
          secret:
            secretName: {{ $components.cloudSecret.name }}
        - name: {{ .Values.global.cloudConfig }}
          configMap:
            name: {{ .Values.global.cloudConfig }}
            items:
              - key: "clusterData"
                path: "clusterData.json"
              {{- if $components.serviceDiscovery.enabled }}
              - key: "services"
                path: "services.json"
              {{- end }}
        - name: config
          configMap:
            name: {{ .Values.nodeAgent.name }}
            items:
              - key: "config.json"
                path: "config.json"


        {{- if ne .Values.global.proxySecretFile "" }}
        - name: proxy-secret
          secret:
            secretName: {{ .Values.global.proxySecretName }}
        {{- end }}
        {{- if .Values.global.overrideDefaultCaCertificates.enabled }}
        - name: custom-ca-certificates
          secret:
            secretName: {{ $components.customCaCertificates.name }}
        {{- end }}
        {{- if .Values.global.extraCaCertificates.enabled }}
        - name: extra-ca-certificates
          secret:
            secretName: {{ .Values.global.extraCaCertificates.secretName }}
        {{- end }}
      containers:
        {{- if $components.clamAV.enabled }}
        - name: {{ .Values.clamav.name }}
          image: "{{ .Values.clamav.image.repository }}:{{ .Values.clamav.image.tag }}"
          imagePullPolicy: {{ .Values.clamav.image.pullPolicy }}
          securityContext:
            runAsUser: 0
            capabilities:
              add:
                - SYS_PTRACE
          resources:
{{ toYaml .Values.clamav.resources | indent 12 }}
          {{- if .Values.clamav.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.clamav.volumeMounts | nindent 10 }}
          {{- end }}
        {{- end }}
        - name: {{ .Values.nodeAgent.name }}
          image: "{{ .Values.nodeAgent.image.repository }}:{{ .Values.nodeAgent.image.tag }}"
          imagePullPolicy: {{ .Values.nodeAgent.image.pullPolicy }}
          livenessProbe:
            httpGet:
              path: /livez
              port: 7888
            initialDelaySeconds: 60
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /readyz
              port: 7888
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
{{ toYaml .Values.nodeAgent.resources | indent 12 }}
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
                  divisor: '1'
            - name: GOMAXPROCS
              valueFrom:
                resourceFieldRef:
                  resource: limits.cpu
                  divisor: '1'
            - name: HOST_ROOT
              value: "/host"
            - name: KS_LOGGER_LEVEL
              value: "{{ .Values.logger.level }}"
            - name: KS_LOGGER_NAME
              value: "{{ .Values.logger.name }}"
            {{- if $components.otelCollector.enabled }}
            - name: OTEL_COLLECTOR_SVC
              value: "otel-collector:4318"
            {{- end }}
            {{- if .Values.configurations.otelUrl }}
            - name: OTEL_COLLECTOR_SVC
              value: {{ .Values.configurations.otelUrl }}
            {{- end }}
            {{- if $components.clamAV.enabled }}
            - name: CLAMAV_SOCKET
              value: "/clamav/clamd.sock"
            {{- end }}
            {{- if ne .Values.global.overrideRuntimePath "" }}
            - name: RUNTIME_PATH
              value: "{{ .Values.global.overrideRuntimePath }}"
            {{- end }}
            {{- if ne .Values.global.httpsProxy "" }}
            - name: HTTPS_PROXY
              value: "{{ .Values.global.httpsProxy }}"
            - name : no_proxy
              value: "{{ $no_proxy_envar_list }}"
            {{- end }}
            {{- if .Values.nodeAgent.config.skipKernelVersionCheck }}
            - name: SKIP_KERNEL_VERSION_CHECK
              value: "true"
            {{- end }}
            {{- if .Values.nodeAgent.config.malwareScanAllFiles }}
            - name: MALWARE_SCAN_ALL_FILES
              value: "true"
            {{- end }}
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            {{- if .Values.capabilities.testing.nodeAgentMultiplication.enabled }}
            - name: MULTIPLY
              value: "true"
            {{- end }}
            {{- range .Values.nodeAgent.env }}
            - name: {{ .name }}
            {{- if .value }}
              value: "{{ .value }}"
            {{- end }}
            {{- end }}
          securityContext:
            runAsUser: 0
            privileged: {{ .Values.nodeAgent.privileged }}
            capabilities:
              add:
                - SYS_ADMIN
                - SYS_PTRACE
                - NET_ADMIN
                - SYSLOG
                - SYS_RESOURCE
                - IPC_LOCK
                - NET_RAW
            seLinuxOptions:
              type: {{ .Values.nodeAgent.seLinuxType }}
          volumeMounts:
          {{- if .Values.volumeMounts }}
          {{- toYaml .Values.volumeMounts | nindent 10 }}
          {{- end }}
          {{- if .Values.nodeAgent.volumeMounts }}
          {{- toYaml .Values.nodeAgent.volumeMounts | nindent 10 }}
          {{- end }}
          - name: {{ $components.cloudSecret.name }}
            mountPath: /etc/credentials
            readOnly: true
          - name: {{ .Values.global.cloudConfig }}
            mountPath: /etc/config/clusterData.json
            readOnly: true
            subPath: "clusterData.json"
          - name: config
            mountPath: /etc/config/config.json
            readOnly: true
            subPath: "config.json"
          {{- if ne .Values.global.proxySecretFile "" }}
          - name: proxy-secret
            mountPath: /etc/ssl/certs/proxy.crt
            subPath: proxy.crt
          {{- end }}
          {{- if .Values.global.overrideDefaultCaCertificates.enabled }}
          - name: custom-ca-certificates
            mountPath: /etc/ssl/certs/ca-certificates.crt
            subPath: ca-certificates.crt
          {{- end }}
          {{- if .Values.global.extraCaCertificates.enabled }}
          {{- range $key, $value := (lookup "v1" "Secret" .Values.ksNamespace .Values.global.extraCaCertificates.secretName).data }}
          - name: extra-ca-certificates
            mountPath: /etc/ssl/certs/{{ $key }}
            subPath: {{ $key }}
          {{- end }}
          {{- end }}
      nodeSelector:
      {{- if .Values.nodeAgent.nodeSelector }}
      {{- toYaml .Values.nodeAgent.nodeSelector | nindent 8 }}
      {{- else if .Values.customScheduling.nodeSelector }}
      {{- toYaml .Values.customScheduling.nodeSelector | nindent 8 }}
      {{- end }}
      affinity:
      {{- if .Values.nodeAgent.affinity }}
      {{- toYaml .Values.nodeAgent.affinity | nindent 8 }}
      {{- else if .Values.customScheduling.affinity }}
      {{- toYaml .Values.customScheduling.affinity | nindent 8 }}
      {{- end }}
      tolerations:
      {{- if .Values.nodeAgent.tolerations }}
      {{- toYaml .Values.nodeAgent.tolerations | nindent 8 }}
      {{- else if .Values.customScheduling.tolerations }}
      {{- toYaml .Values.customScheduling.tolerations | nindent 8 }}
      {{- end }}
{{- end }}
