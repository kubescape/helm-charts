{{- $components := fromYaml (include "components" .) }}
{{- $configurations := fromYaml (include "configurations" .) }}
{{- if $components.nodeAgent.enabled }}
{{/* validate that either alertCRD.scopeClustered or alertCRD.scopeNamespaced defined when the capability enabled */}}
{{- if eq .Values.capabilities.runtimeDetection "enable" }}
{{- if and (not .Values.alertCRD.scopeNamespaced) (not .Values.alertCRD.scopeClustered) }}
{{- fail "Runtime detection is enabled, but the Runtime rule alert binding CRD is not configured to be created neither in the cluster scope nor namespace scope (set alertCRD.scopeClustered or alertCRD.scopeNamepaced)" }}
{{- end }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.nodeAgent.name }}
  namespace: {{ .Values.ksNamespace }}
  labels:
    {{- include "kubescape-operator.labels" (dict "Chart" .Chart "Release" .Release "Values" .Values "app" .Values.nodeAgent.name "tier" .Values.global.namespaceTier) | nindent 4 }}
    kubescape.io/tier: "core"
data:
  config.json: |
    {
        "applicationProfileServiceEnabled": {{ $configurations.runtimeObservability }},
        "relevantCVEServiceEnabled": {{ eq .Values.capabilities.relevancy "enable" }},
        "prometheusExporterEnabled": {{ eq .Values.nodeAgent.config.prometheusExporter "enable" }},
        "runtimeDetectionEnabled": {{ eq .Values.capabilities.runtimeDetection "enable" }},
        "httpDetectionEnabled": {{ eq .Values.capabilities.httpDetection "enable" }},
        "networkServiceEnabled": {{ eq .Values.capabilities.networkPolicyService "enable" }},
        "malwareDetectionEnabled": {{ eq .Values.capabilities.malwareDetection "enable" }},
        "nodeProfileServiceEnabled": {{ eq .Values.capabilities.nodeProfileService "enable" }},
        "seccompServiceEnabled": {{ eq .Values.capabilities.seccompProfileService "enable" }},
        "initialDelay": "{{ .Values.nodeAgent.config.learningPeriod }}",
        "updateDataPeriod": "{{ .Values.nodeAgent.config.updatePeriod }}",
        "nodeProfileInterval": "{{ .Values.nodeAgent.config.nodeProfileInterval }}",
        "maxSniffingTimePerContainer": "{{ .Values.nodeAgent.config.maxLearningPeriod }}",
        {{- if ne .Values.includeNamespaces "" }}
        "includeNamespaces": "{{ .Values.includeNamespaces }}",
        {{- else if ne .Values.excludeNamespaces "" }}
        "excludeNamespaces": "{{ .Values.excludeNamespaces }}",
        {{- end }}
        "exporters": {
          "httpExporterConfig": {{- .Values.nodeAgent.config.httpExporterConfig | toJson }},
          "alertManagerExporterUrls": {{- .Values.nodeAgent.config.alertManagerExporterUrls | toJson }},
          "stdoutExporter": {{- .Values.nodeAgent.config.stdoutExporter }},
          "syslogExporterURL": "{{- .Values.nodeAgent.config.syslogExporterURL }}"
        }
    }
---
{{- if $components.clamAV.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.clamav.name }}
  namespace: {{ .Values.ksNamespace }}
data:
  clamd.conf: |-
{{ .Files.Get "clamav/clamd.conf" | indent 4 }}
  freshclam.conf: |-
{{ .Files.Get "clamav/freshclam.conf" | indent 4 }}
{{- end}}
{{- end }}
