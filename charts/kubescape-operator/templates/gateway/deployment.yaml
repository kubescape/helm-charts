{{- $components := fromYaml (include "components" .) }}
{{- if $components.gateway.enabled }}
{{- $no_proxy_envar_list := (include "no_proxy_envar_list" .) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.gateway.name }}
  namespace: {{ .Values.ksNamespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.gateway.name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app: {{ .Values.gateway.name }}
    tier: {{ .Values.global.namespaceTier }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
spec:
  replicas: {{ .Values.gateway.replicaCount }}
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxSurge: 0%
      maxUnavailable: 100%
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.gateway.name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      tier: {{ .Values.global.namespaceTier }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.gateway.name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        tier: {{ .Values.global.namespaceTier }}
        app: {{ .Values.gateway.name }}
      {{- if .Values.global.addRevisionLabel }}
        helm.sh/revision: "{{ .Release.Revision }}"
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ toYaml .Values.imagePullSecrets }}
      {{- end }}
      securityContext:
        runAsUser: 65532
        fsGroup: 65532
      containers:
        - name: {{ .Values.gateway.name }}
          image: "{{ .Values.gateway.image.repository }}:{{ .Values.gateway.image.tag }}"
          imagePullPolicy: {{ .Values.gateway.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          livenessProbe:
            httpGet:
              path: /v1/liveness
              port: readiness-port
            initialDelaySeconds: 3
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /v1/readiness
              port: readiness-port
            initialDelaySeconds: 10
            periodSeconds: 5
          ports:
            - name: "readiness-port"
              containerPort: 8000
              protocol: TCP
            - name: "websocket"
              containerPort: {{ .Values.gateway.websocketService.port }}
              protocol: TCP
            - name: "rest-api"
              containerPort: {{ .Values.gateway.httpService.port }}
              protocol: TCP
          resources:
{{ toYaml .Values.gateway.resources | indent 12 }}
          env:
            - name: GOMEMLIMIT
              value: "{{ .Values.gateway.resources.requests.memory }}B"
            - name: KS_LOGGER_LEVEL
              value: "{{ .Values.logger.level }}"
            - name: KS_LOGGER_NAME
              value: "{{ .Values.logger.name }}"
            - name: WEBSOCKET_PORT
              value: "{{ .Values.gateway.websocketService.port }}"
            - name: HTTP_PORT
              value: "{{ .Values.gateway.httpService.port }}"
            {{- if $components.otelCollector.enabled }}
            - name: ACCOUNT_ID
              value: "{{ .Values.account }}"
            - name: OTEL_COLLECTOR_SVC
              value: "otel-collector:4317"
            {{- end }}
            {{- if ne .Values.global.httpsProxy "" }}
            - name: HTTPS_PROXY
              value: "{{ .Values.global.httpsProxy }}"
            - name : no_proxy
              value: "{{ $no_proxy_envar_list }}"
            {{- end }}
            {{- range .Values.gateway.env }}
            - name: {{ .name }}
              value: "{{ .value }}"
            {{- end }}
          args:
            - -alsologtostderr
            - -v=4
            - 2>&1
          volumeMounts:
          - name: {{ .Values.global.cloudConfig }}
            mountPath: /etc/config
            readOnly: true
{{- if .Values.volumeMounts }}
{{ toYaml .Values.volumeMounts | indent 10 }}
{{- end }}
{{- if .Values.gateway.volumeMounts }}
{{ toYaml .Values.gateway.volumeMounts | indent 10 }}
{{- end }}
          {{- if ne .Values.global.proxySecretFile "" }}
          - name: proxy-secret
            mountPath: /etc/ssl/certs/proxy.crt
            subPath: proxy.crt
          {{- end }}
      volumes:
      {{- if ne .Values.global.proxySecretFile "" }}
        - name: proxy-secret
          secret:
            secretName: {{ .Values.global.proxySecretName }}
      {{- end }}
        - name: {{ .Values.global.cloudConfig }}
          configMap:
            name: {{ .Values.global.cloudConfig }}
            items:
            - key: "clusterData"
              path: "clusterData.json"
            {{- if $components.serviceDiscovery.enabled }}
            - key: "services"
              path: "services.json"
            {{- end }}
{{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 8 }}
{{- end }}
{{- if .Values.gateway.volumes }}
{{ toYaml .Values.gateway.volumes | indent 8 }}
{{- end }}
      automountServiceAccountToken: false
      {{- with .Values.gateway.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.gateway.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
{{- end }}
