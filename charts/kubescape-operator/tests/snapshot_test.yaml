suite: Snapshot tests
tests:
  - it: all capabilities
    asserts:
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      account: 9e6c0c2c-6bd0-4919-815b-55030de7c9a0
      accessKey: f304d73b-d43c-412b-82ea-e4c859493ce6
      alertCRD:
        installDefault: true
      capabilities:
        configurationScan: enable
        continuousScan: enable
        nodeScan: enable
        vulnerabilityScan: enable
        relevancy: enable
        vexGeneration: enable
        runtimeObservability: enable
        networkPolicyService: enable
        runtimeDetection: enable
        httpDetection: enable
        malwareDetection: enable
        nodeProfileService: enable
        nodeSbomGeneration: enable
        seccompProfileService: enable
        autoUpgrading: enable
        prometheusExporter: enable
        admissionController: enable
        manageWorkloads: enable
      server: api.armosec.io
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      includeNamespaces: "my-namespace"
      global:
        httpsProxy: "https://foo:bar@baz:1234"
        noProxy: "*.foo,bar.baz"
        networkPolicy:
          createEgressRules: true
          enabled: true
          apiServerPort: 443
          httpsProxyIP: 1.1.1.1
          httpsProxyPort: 1234
        proxySecretFile: foo
        overrideDefaultCaCertificates:
          enabled: true
          caCertificates: "foo"
        openshift:
          scc:
            enabled: true
      imagePullSecrets: "foo"
      grypeOfflineDB.enabled: true
      kubescape.serviceMonitor.enabled: true
      kubescapeScheduler.scanSchedule: "1 2 3 4 5"
      kubevulnScheduler.scanSchedule: "1 2 3 4 5"
      nodeAgent.config.skipKernelVersionCheck: true
      storage.forceVirtualCrds: true
      prometheusExporter:
        enableWorkloadMetrics: true
  - it: minimal capabilities
    asserts:
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      excludeNamespaces: ""
      includeNamespaces: ""
      kubescapeScheduler.scanSchedule: "1 2 3 4 5"
      kubevulnScheduler.scanSchedule: "1 2 3 4 5"
  - it: disable otel
    asserts:
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      account: 9e6c0c2c-6bd0-4919-815b-55030de7c9a0
      accessKey: f304d73b-d43c-412b-82ea-e4c859493ce6
      clusterName: kind-kind
      kubescapeScheduler.scanSchedule: "1 2 3 4 5"
      kubevulnScheduler.scanSchedule: "1 2 3 4 5"
      server: api.armosec.io
  - it: default capabilities
    asserts:
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      account: 9e6c0c2c-6bd0-4919-815b-55030de7c9a0
      accessKey: f304d73b-d43c-412b-82ea-e4c859493ce6
      alertCRD:
        installDefault: true
      capabilities:
        configurationScan: enable
        nodeScan: enable
        vulnerabilityScan: enable
        relevancy: enable
        vexGeneration: disable
        runtimeObservability: enable
        networkPolicyService: enable
        runtimeDetection: disable
        malwareDetection: disable
        nodeProfileService: disable
        autoUpgrading: disable
        prometheusExporter: disable
        admissionController: disable
      server: api.armosec.io
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      excludeNamespaces: "kubescape,kube-system,kube-public,kube-node-lease,kubeconfig,gmp-system,gmp-public"
      global:
        networkPolicy:
          createEgressRules: true
          enabled: true
          apiServerIP: "192.168.49.2"
          apiServerPort: 8443
        proxySecretFile: foo
      grypeOfflineDB.enabled: true
      kubescape.serviceMonitor.enabled: true
      kubescapeScheduler.scanSchedule: "1 2 3 4 5"
      kubevulnScheduler.scanSchedule: "1 2 3 4 5"
  - it: with single private registry credentials
    template: configs/private-registries-creds-secret.yaml
    documentSelector:
      path: metadata.name
      value: kubescape-registry-scan-secrets
    asserts:
      - equal:
          path: metadata.name
          value: kubescape-registry-scan-secrets
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      imageScanning:
        privateRegistries:
          credentials:
            - registry: foo.example.com
              username: bar
              password: baz
  - it: with multiple private registry credentials
    template: configs/private-registries-creds-secret.yaml
    documentSelector:
      path: metadata.name
      value: kubescape-registry-scan-secrets
    asserts:
      - equal:
          path: metadata.name
          value: kubescape-registry-scan-secrets
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      imageScanning:
        privateRegistries:
          credentials:
            - registry: foo.example.com
              username: bar
              password: baz
              skipTlsVerify: true
            - registry: test.example.com
              username: xxx
              password: yyy
              insecure: true
  - it: with image pull secret generated
    template: configs/image-pull-secret.yaml
    documentSelector:
      path: metadata.name
      value: quay-secret
    asserts:
      - equal:
          path: metadata.name
          value: quay-secret
      - matchSnapshot: {}
    capabilities:
      apiVersions:
        - batch/v1
    set:
      unittest: true
      configurations.otelUrl: "otelCollector:4317"
      clusterName: kind-kind
      imagePullSecrets: quay-secret
      imagePullSecret:
        server: quay.io
        username: foo
        password: xxxxxxx